/* Find the contiguous subarray within an array, A of length N which has the largest sum.

Input Format:

The first and the only argument contains an integer array, A.
Output Format:

Return an integer representing the maximum possible sum of the contiguous subarray.
Constraints:

1 <= N <= 1e6
-1000 <= A[i] <= 1000
For example:

Input 1:
    A = [1, 2, 3, 4, -10]

Output 1:
    10

Explanation 1:
    The subarray [1, 2, 3, 4] has the maximum possible sum of 10.

Input 2:
    A = [-2, 1, -3, 4, -1, 2, 1, -5, 4]

Output 2:
    6

Explanation 2:
    The subarray [4,-1,2,1] has the maximum possible sum of 6.
*/

Naive Solution : 
public class Solution {
    // DO NOT MODIFY THE LIST. IT IS READ ONLY
    public int maxSubArray(final List<Integer> A) {
        int res=Integer.MIN_VALUE;
        int n = A.size();
        for(int i=0; i<n; i++) {
            int curr = 0;
            for(int j=i; j<n; j++) {
                curr+=A.get(j);
                res = Math.max(res, curr);
            }
        }
        return res;
    }
}

Time complexity - O(n^2)

Efficient solution:

public class Solution {
    // DO NOT MODIFY THE LIST. IT IS READ ONLY
    public int maxSubArray(final List<Integer> A) {
        int n = A.size();
        int res=A.get(0);
        int maxEnding = A.get(0);
        for(int i=1; i<n; i++) {
            maxEnding = Math.max(maxEnding, maxEnding+A.get(i));
            res = Math.max(res, maxEnding);
        }
        return res;
    }
}

Time Complexity - O(n)